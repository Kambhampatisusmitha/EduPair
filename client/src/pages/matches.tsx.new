import { useState } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { useLocation } from "wouter";
import { useAuth } from "@/contexts/auth-context";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Separator } from "@/components/ui/separator";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Textarea } from "@/components/ui/textarea";
import { Skeleton } from "@/components/ui/skeleton";
import { useToast } from "@/hooks/use-toast";
import { ArrowRight, RefreshCw, AlertTriangle, UserPlus, Check, X, Users, Calendar, Clock, Video, MapPin } from "lucide-react";
import { apiRequest, getQueryFn } from "@/lib/queryClient";
import { SuggestedMatch, PairingRequestWithUsers, LearningSession } from "@/types/matching";
import SkillTag from "@/components/ui/skill-tag";
import { cn } from "@/lib/utils";
import { format, isAfter, parseISO } from "date-fns";

// Confirmed session card component
const ConfirmedSessionCard = ({ session, onViewDetails }: { 
  session: LearningSession; 
  onViewDetails: () => void;
}) => {
  const [, navigate] = useLocation();
  
  // Get the other participant (not the current user)
  const getOtherParticipant = (session: LearningSession) => {
    // Get current user from any session's participants (assuming we're always a participant)
    const currentUserId = session.participants[0]?.userId;
    return session.participants.find(p => p.userId !== currentUserId)?.user;
  };
  
  // Get display name for a user
  const getDisplayName = (user: any) => {
    return user?.displayName || user?.fullname || "User";
  };
  
  // Get initials for avatar fallback
  const getInitials = (name: string) => {
    return name
      .split(' ')
      .map(part => part[0])
      .join('')
      .toUpperCase()
      .substring(0, 2);
  };
  
  // Format time for session display
  const formatSessionTime = (dateString: string) => {
    const date = parseISO(dateString);
    const formattedDate = format(date, "EEEE, MMMM d, yyyy");
    const formattedTime = format(date, "h:mm a");
    
    return `${formattedDate} at ${formattedTime}`;
  };
  
  const otherUser = getOtherParticipant(session);
  const sessionTime = formatSessionTime(session.scheduledDate);
  const isPast = !isAfter(parseISO(session.scheduledDate), new Date());
  
  return (
    <Card className="hover:shadow-md transition-shadow duration-200">
      <CardContent className="p-6">
        <div className="flex justify-between items-start">
          <div className="flex items-center">
            <Avatar className="h-12 w-12">
              <AvatarImage src={otherUser?.avatar || ""} alt={getDisplayName(otherUser)} />
              <AvatarFallback>{getInitials(getDisplayName(otherUser))}</AvatarFallback>
            </Avatar>
            <div className="ml-4">
              <h3 className="font-medium text-lg text-primary dark:text-white">
                {getDisplayName(otherUser)}
              </h3>
              <p className="text-sm text-gray-500 dark:text-gray-400">
                {sessionTime}
              </p>
            </div>
          </div>
          
          <Badge className={cn(
            "text-sm",
            isPast ? "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300" :
            "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300"
          )}>
            {isPast ? "Completed" : "Scheduled"}
          </Badge>
        </div>
        
        <div className="mt-4 space-y-2">
          <div className="flex items-center text-sm text-gray-500 dark:text-gray-400">
            <Clock className="h-4 w-4 mr-2" />
            <span>{session.duration} minutes</span>
          </div>
          
          <div className="flex items-center text-sm text-gray-500 dark:text-gray-400">
            {session.location === "online" ? (
              <Video className="h-4 w-4 mr-2" />
            ) : (
              <MapPin className="h-4 w-4 mr-2" />
            )}
            <span>{session.location === "online" ? "Online Session" : "In-Person Meeting"}</span>
          </div>
        </div>
        
        <div className="mt-4 flex space-x-2">
          <Button 
            variant="outline" 
            className="flex-1"
            onClick={() => navigate('/sessions')}
          >
            <Calendar className="h-4 w-4 mr-1" />
            View Details
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};
